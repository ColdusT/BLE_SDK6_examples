<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\sci_uart_ek_ra2e1_ep.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\sci_uart_ek_ra2e1_ep.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Tue Oct  5 16:34:33 2021
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Reset_Handler &rArr; main &rArr; hal_entry &rArr; uart_initialize &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1]">NMI_Handler</a> from bsp_group_irq.o(.text.NMI_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[9]">PendSV_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text.Reset_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[7]">SVC_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[a]">SysTick_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[e]">sci_uart_eri_isr</a> from r_sci_uart.o(.text.sci_uart_eri_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[b]">sci_uart_rxi_isr</a> from r_sci_uart.o(.text.sci_uart_rxi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[d]">sci_uart_tei_isr</a> from r_sci_uart.o(.text.sci_uart_tei_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[c]">sci_uart_txi_isr</a> from r_sci_uart.o(.text.sci_uart_txi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[f]">user_uart_callback</a> from uart_ep.o(.text.user_uart_callback) referenced from hal_data.o(.rodata.g_uart0_cfg)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[18]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_rxi_isr
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[20]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[31]"></a>Default_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_group_irq.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[1e]"></a>R_BSP_RegisterProtectDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f]"></a>R_BSP_RegisterProtectEnable</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_RegisterProtectEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[13]"></a>R_BSP_WarmStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_entry.o(.text.R_BSP_WarmStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_BSP_WarmStart &rArr; R_IOPORT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[28]"></a>R_FSP_VersionGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_common.o(.text.R_FSP_VersionGet))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[14]"></a>R_IOPORT_Open</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, r_ioport.o(.text.R_IOPORT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_IOPORT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
</UL>

<P><STRONG><a name="[26]"></a>R_SCI_UART_Close</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, r_sci_uart.o(.text.R_SCI_UART_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_SCI_UART_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_uart
</UL>

<P><STRONG><a name="[2b]"></a>R_SCI_UART_Open</STRONG> (Thumb, 1016 bytes, Stack size 60 bytes, r_sci_uart.o(.text.R_SCI_UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = R_SCI_UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[2c]"></a>R_SCI_UART_Write</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, r_sci_uart.o(.text.R_SCI_UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_SCI_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_callback
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Reset_Handler &rArr; main &rArr; hal_entry &rArr; uart_initialize &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[17]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, segger_rtt.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>

<P><STRONG><a name="[19]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, segger_rtt.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[1a]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_uart
</UL>

<P><STRONG><a name="[1b]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 1398 bytes, Stack size 152 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[22]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_clocks.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[15]"></a>SystemInit</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, system.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemInit &rArr; R_BSP_WarmStart &rArr; R_IOPORT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1d]"></a>bsp_clock_init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, bsp_clocks.o(.text.bsp_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[24]"></a>bsp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_init.o(.text.bsp_init))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[23]"></a>bsp_irq_cfg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_irq.o(.text.bsp_irq_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[25]"></a>deinit_uart</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, uart_ep.o(.text.deinit_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = deinit_uart &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_UART_Close
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[27]"></a>hal_entry</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, hal_entry.o(.text.hal_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = hal_entry &rArr; uart_initialize &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ep_demo
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_uart
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_VersionGet
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; hal_entry &rArr; uart_initialize &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[e]"></a>sci_uart_eri_isr</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, r_sci_uart.o(.text.sci_uart_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sci_uart_eri_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[b]"></a>sci_uart_rxi_isr</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, r_sci_uart.o(.text.sci_uart_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sci_uart_rxi_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[d]"></a>sci_uart_tei_isr</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, r_sci_uart.o(.text.sci_uart_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sci_uart_tei_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[c]"></a>sci_uart_txi_isr</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, r_sci_uart.o(.text.sci_uart_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sci_uart_txi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[2a]"></a>uart_ep_demo</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart_ep.o(.text.uart_ep_demo))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[29]"></a>uart_initialize</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart_ep.o(.text.uart_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = uart_initialize &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_UART_Open
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[f]"></a>user_uart_callback</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, uart_ep.o(.text.user_uart_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = user_uart_callback &rArr; R_SCI_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_uart0_cfg)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c]"></a>_PrintUnsigned</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, segger_rtt_printf.o(.text._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _PrintUnsigned &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
