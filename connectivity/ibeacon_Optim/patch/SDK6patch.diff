diff --git a/sdk/ble_stack/rwble/rwble.c b/sdk/ble_stack/rwble/rwble.c
index 488fa35..28aa149 100644
--- a/sdk/ble_stack/rwble/rwble.c
+++ b/sdk/ble_stack/rwble/rwble.c
@@ -49,11 +49,11 @@
 #include "adc.h"
 #include "user_periph_setup.h"
 #include "arch_api.h"
-
+#include "user_app.h"
 #include "arch_system.h"
 #include "arch_wdg.h"
 #include "llc_util.h"
-
+#include "lld_util.h"  
 #include "arch_rom.h"
 #include "hci.h"
 #include "h4tl.h"
@@ -77,6 +77,16 @@
 
 last_ble_evt        arch_rwble_last_event           __SECTION_ZERO("retention_mem_area0");
 boost_overhead_st   set_boost_low_vbat1v_overhead   __SECTION_ZERO("retention_mem_area0");
+                  
+uint8_t change_bd_addr_flag = 0;            
+uint8_t seed_region = 0x00;
+uint8_t store_adv_data_len                     __SECTION_ZERO("retention_mem_area0"); //@RETENTION MEMORY //releb
+uint8_t test_scan_rsp_data_len                __SECTION_ZERO("retention_mem_area0"); //@RETENTION MEMORY //releb
+uint8_t store_adv_data[ADV_DATA_LEN]           __SECTION_ZERO("retention_mem_area0"); //@RETENTION MEMORY //releb
+uint8_t test_scan_rsp_data[SCAN_RSP_DATA_LEN] __SECTION_ZERO("retention_mem_area0"); //@RETENTION MEMORY //releb
+extern ibeacon_adv_payload_t adv_payload;
+extern ibeacon_adv_payload_t_new adv_payload_new;
+
 
 extern uint16_t clk_freq_trim_reg_value;
 
@@ -1090,9 +1100,55 @@ __BLEIRQ void rwble_isr(void)
 
             dlg_event_isr();
 
-            DBG_SWDIAG(BLE_ISR, EVENTINT, 0);
-        }
-
+			if(change_bd_addr_flag % 2) 
+				
+			{
+				user_app_adv_start();
+				
+		    memcpy(store_adv_data, &adv_payload, sizeof(ibeacon_adv_payload_t));
+				store_adv_data_len = sizeof(ibeacon_adv_payload_t);
+				
+				/* Set output power to maximum value (0dBm) */
+	      rf_pa_pwr_set(RF_TX_PWR_LVL_0d0);
+	
+				llm_le_env.rand_add.addr[0] = 0x11;
+				llm_le_env.rand_add.addr[1] = 0x12;
+				llm_le_env.rand_add.addr[2] = 0x13;
+				llm_le_env.rand_add.addr[3] = 0x14;
+				llm_le_env.rand_add.addr[4] = 0x15;
+				llm_le_env.rand_add.addr[5] = 0x16;
+				
+			}
+			else 
+				
+			{
+		    user_app_adv_start_new();
+				
+				memcpy(store_adv_data, &adv_payload_new, sizeof(ibeacon_adv_payload_t_new));
+				store_adv_data_len = sizeof(ibeacon_adv_payload_t_new);
+	
+				/* Set output power to maximum value (+2.5dBm) */
+		    rf_pa_pwr_set(RF_TX_PWR_LVL_PLUS_2d5);
+				llm_le_env.rand_add.addr[0] = 0x01;
+				llm_le_env.rand_add.addr[1] = 0x02;
+				llm_le_env.rand_add.addr[2] = 0x03;
+				llm_le_env.rand_add.addr[3] = 0x04;
+				llm_le_env.rand_add.addr[4] = 0x05;
+				llm_le_env.rand_add.addr[5] = 0x06;
+			}	         
+
+         app_easy_gap_update_adv_data(store_adv_data, store_adv_data_len, test_scan_rsp_data, test_scan_rsp_data_len);
+												
+        //first byte of random static MAC address is incremented upon each beacon in a sequence of ten (inc_v) beacons
+        llm_le_env.rand_add.addr[0] = seed_region + change_bd_addr_flag; 
+			
+			  lld_util_set_bd_address(&llm_le_env.rand_add, ADDR_RAND);
+
+				change_bd_addr_flag++;
+				if(change_bd_addr_flag >= 10) change_bd_addr_flag = 0;
+			
+        } // End of event interrupt (BLE_EVENTINTSTAT_BIT)
+				
         // AFPM interrupt
         if (irq_stat & BLE_EVENTAPFAINTSTAT_BIT)
         {
@@ -1182,8 +1238,11 @@ __BLEIRQ void rwble_isr(void)
 
             DBG_SWDIAG(BLE_ISR, ERRORINT, 0);
         }
-    }
+    }			
 #endif // __EXCLUDE_ROM_RWBLE__
+		
+		   /* Optimize  the time between Tx pulses */
+	ble_advtim_set (500);
 }
 
 #if defined (__DA14531__)
diff --git a/sdk/platform/arch/arch.h b/sdk/platform/arch/arch.h
index f62d556..4ea6b08 100644
--- a/sdk/platform/arch/arch.h
+++ b/sdk/platform/arch/arch.h
@@ -570,10 +570,10 @@ extern uint32_t *rom_cfg_table;
 #endif
 
 #if defined (__DA14531__)
-#define HW_STARTUP_TIME_IN_XTAL32K_CYCLES    (11)   // 11 LP clocks for startup state machine handling
-#define HW_STARTUP_TIME_IN_RCX_CYCLES        (7)    // 7 LP clocks for startup state machine handling
-#define RCX_BLE_PWR_UP_TO_SLP_IRQ_USEC       (60)
-#define XTAL32K_BLE_PWR_UP_TO_SLP_IRQ_USEC   (45)
+#define HW_STARTUP_TIME_IN_XTAL32K_CYCLES    (5)   // 5 LP clocks for startup state machine handling
+#define HW_STARTUP_TIME_IN_RCX_CYCLES        (3)    // 3 LP clocks for startup state machine handling
+#define RCX_BLE_PWR_UP_TO_SLP_IRQ_USEC       (30)
+#define XTAL32K_BLE_PWR_UP_TO_SLP_IRQ_USEC   (30)
 #endif
 
 #if defined (__DA14531__)
diff --git a/sdk/platform/arch/main/arch_main.c b/sdk/platform/arch/main/arch_main.c
index 22470a8..e969202 100644
--- a/sdk/platform/arch/main/arch_main.c
+++ b/sdk/platform/arch/main/arch_main.c
@@ -479,9 +479,6 @@ __STATIC_INLINE void schedule_while_ble_on(void)
     {
         //execute messages and events
         rwip_schedule();
-#if defined (__DA14531__)
-        rcx20_read_freq(false);
-#endif
 
 #if !defined(__FPGA__)
         if (arch_rwble_last_event == BLE_EVT_END)
diff --git a/sdk/platform/arch/main/arch_system.c b/sdk/platform/arch/main/arch_system.c
index 60710c5..6487dbf 100644
--- a/sdk/platform/arch/main/arch_system.c
+++ b/sdk/platform/arch/main/arch_system.c
@@ -759,9 +759,9 @@ void conditionally_run_radio_cals(void)
     }
 
 #if (USE_RF_LDO_CALIBRATION)
-    if (((current_time - last_time) >= 3200) || rf_ldo_calibration_pending)
+    if (((current_time - last_time) >= 500000) || rf_ldo_calibration_pending)
 #else
-    if ((current_time - last_time) >= 3200) //2 sec
+    if ((current_time - last_time) >= 500000) //2 sec
 #endif
     {
 #if (USE_RF_LDO_CALIBRATION)
@@ -1096,7 +1096,7 @@ uint8_t check_sys_startup_period(void)
 
 __WEAK bool app_use_lower_clocks_check(void)
 {
-    return false;
+    return true;
 }
 
 void lld_sleep_init_func(void)
diff --git a/sdk/platform/utilities/otp_cs/otp_cs.c b/sdk/platform/utilities/otp_cs/otp_cs.c
index d89dcf8..db8eec1 100644
--- a/sdk/platform/utilities/otp_cs/otp_cs.c
+++ b/sdk/platform/utilities/otp_cs/otp_cs.c
@@ -60,7 +60,7 @@
  * entry.
  ****************************************************************************************
  */
-#define XTAL32M_WAIT_TRIM_TIME_USEC      (1000)  // 1msec
+#define XTAL32M_WAIT_TRIM_TIME_USEC      (500)  // 500usec
 
 /*
  * GLOBAL VARIABLES
